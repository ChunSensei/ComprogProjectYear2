'use client'

import { useCallback, useState } from 'react'
import { Upload, Loader2 } from 'lucide-react'

interface FileUploadProps {
  onFileUpload: (file: File) => Promise<void>
  isProcessing: boolean
}

export default function FileUpload({ onFileUpload, isProcessing }: FileUploadProps) {
  const [isDragging, setIsDragging] = useState(false)
  const [error, setError] = useState('')

  const handleDrop = useCallback((e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault()
    e.stopPropagation()
    setIsDragging(false)

    if (e.dataTransfer.files && e.dataTransfer.files[0]) {
      const file = e.dataTransfer.files[0]
      if (file.type === 'application/pdf') {
        onFileUpload(file).catch((err) => {
          setError('Failed to upload file. Please try again.')
          console.error(err)
        })
      } else {
        setError('Please upload a valid PDF file')
      }
    }
  }, [onFileUpload])

  const handleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      const file = e.target.files[0]
      if (file.type === 'application/pdf') {
        onFileUpload(file).catch((err) => {
          setError('Failed to upload file. Please try again.')
          console.error(err)
        })
      } else {
        setError('Please upload a valid PDF file')
      }
    }
  }, [onFileUpload])

  const handleDragOver = useCallback((e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault()
    e.stopPropagation()
    setIsDragging(true)
  }, [])

  const handleDragLeave = useCallback((e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault()
    e.stopPropagation()
    setIsDragging(false)
  }, [])

  return (
    <div className="w-full">
      <div
        className={`border-2 border-dashed rounded-lg p-8 text-center transition-colors ${
          isDragging ? 'border-blue-500 bg-blue-50' : 'border-gray-300 hover:border-gray-400'
        }`}
        onDrop={handleDrop}
        onDragOver={handleDragOver}
        onDragLeave={handleDragLeave}
      >
        <div className="flex flex-col items-center justify-center space-y-4">
          {isProcessing ? (
            <>
              <Loader2 className="h-10 w-10 text-blue-500 animate-spin" />
              <p className="text-gray-600">Processing PDF...</p>
            </>
          ) : (
            <>
              <div className="p-3 bg-blue-100 rounded-full">
                <Upload className="h-6 w-6 text-blue-600" />
              </div>
              <div>
                <p className="text-sm text-gray-600">
                  <span className="text-blue-600 font-medium">Click to upload</span> or drag and drop
                </p>
                <p className="text-xs text-gray-500 mt-1">PDF file (max. 10MB)</p>
              </div>
              <input
                type="file"
                accept=".pdf"
                className="hidden"
                id="file-upload"
                onChange={handleChange}
                disabled={isProcessing}
              />
              <label
                htmlFor="file-upload"
                className="cursor-pointer text-sm text-blue-600 hover:text-blue-800"
              >
                Choose file
              </label>
            </>
          )}
        </div>
      </div>
      {error && <p className="mt-2 text-sm text-red-600 text-center">{error}</p>}
    </div>
  )
}
